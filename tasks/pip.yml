- name: Set openwisp2_python_packages
  set_fact:
    openwisp2_python_packages: []

- name: Set custom package list
  set_fact:
    openwisp2_python_packages: "{{ openwisp2_python_packages  + [item] }}"
  with_items:
    - "{{ openwisp2_controller_pip }}"
    - "{{ openwisp2_users_pip }}"
    - "{{ openwisp2_utils_pip }}"
    - "{{ openwisp2_django_netjsonconfig_pip }}"
    - "{{ openwisp2_django_x509_pip }}"
    - "{{ openwisp2_django_loci_pip }}"
    - "{{ openwisp2_netjsonconfig_pip }}"
  when: item | bool

- name: Add network_topology to custom package list if set and enabled
  set_fact:
    openwisp2_python_packages: "{{ openwisp2_python_packages + [item] }}"
  with_items:
    - "{{ openwisp2_django_netjsongraph_pip }}"
    - "{{ openwisp2_network_topology_pip }}"
  when: item and openwisp2_network_topology

- name: Update pip & related tools
  pip:
    name:
      - pip
      - setuptools
      - wheel
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install cryptography from pip
  pip:
    name: cryptography
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install openwisp2 controller and its dependencies
  pip:
    name:
      - "openwisp-controller~={{ openwisp2_controller_version }}"
      - channels_redis
      - service_identity
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  notify: reload supervisor
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install django-redis
  pip:
    name: "django-redis>=4.9.0"
    state: present
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  notify: reload supervisor
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install openwisp2 network topology and its dependencies
  when: openwisp2_network_topology
  pip:
    name: "openwisp-network-topology~={{ openwisp2_network_topology_version }}"
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  notify: reload supervisor
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install custom OpenWISP 2 Python packages
  when: openwisp2_python_packages
  pip:
    name: "{{ openwisp2_python_packages }}"
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  notify: reload supervisor
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: Install extra python packages
  pip:
    name: "{{ openwisp2_extra_python_packages }}"
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor

- name: Install uwsgi
  pip:
    name: uwsgi
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor

- name: Install eventlet
  pip:
    name: eventlet
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor

- name: Install psycopg2
  when: openwisp2_database.engine in ["django.db.backends.postgresql", "django.contrib.gis.db.backends.postgis"]
  pip:
    name: psycopg2
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor

- name: Install MySQL-python
  when: openwisp2_database.engine in ["django.db.backends.mysql", "django.contrib.gis.db.backends.mysql"]
  pip:
    name: MySQL-python
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor

- name: Install raven (sentry client)
  when: openwisp2_sentry.get('dsn')
  pip:
    name: raven
    state: latest
    virtualenv: "{{ virtualenv_path }}"
    virtualenv_python: "{{ openwisp2_python }}"
    virtualenv_site_packages: yes
  retries: 5
  delay: 10
  register: result
  until: result is success
  notify: reload supervisor
